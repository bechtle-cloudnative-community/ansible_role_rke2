- name: Create VM
  block:

    - name: Create virtual machines
      kubevirt.core.kubevirt_vm:
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default(default_namespace) }}"
        state: present
        wait_timeout: 300
        wait: true
        running: true
        labels:
          ansible-molecule: "{{ item.name }}"
          vm.cnv.io/name: "{{ item.name }}"
          app: molecule-testing
          primary: '{{ item.primary | default(false) | string }}'
        spec:
          hostname: "{{ item.name }}"
          subdomain: "molecule"
          runStrategy: Always
          domain:
            cpu:
              cores: 2
            resources:
              limits:
                memory: "{{ item.memory | default(default_vm_memory) }}"
            devices:
              disks:
                - disk:
                    bus: virtio # Type of disk bus
                  name: rootdisk # Name of the container disk
                - disk:
                    bus: virtio # Type of disk bus
                  name: cloudinitdisk # Name of the cloud-init disk
              interfaces:
                - name: default
                  masquerade: {}
          networks:
            - name: default
              pod: {}
          volumes:
            - dataVolume:
                name: "pvc-{{ item.name }}-root"
              name: rootdisk
            - cloudInitNoCloud:
                userData: |-
                  #cloud-config
                  users:
                    - name: {{ default_user_molecule }}
                      lock_passwd: false
                      passwd: {{ default_hashed_passwd }}
                      ssh_authorized_keys:
                        - {{ lookup('file', ssh_key_path + '.pub') }}
                      sudo:
                        - ALL=(ALL) NOPASSWD:ALL
              name: cloudinitdisk
        data_volume_templates:
          - metadata:
              name: "pvc-{{ item.name }}-root"
              namespace: devops
            spec:
              source:
                registry:
                  url: "docker://{{ item.container_image }}"
              storage:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "{{ item.storage_size | default(default_storage_size) }}"

    - name: Ensure API Cluster service is created
      register: node_k8s_svc
      retries: 30
      delay: 3
      until: "(item.ssh_service.type == 'LoadBalancer' and node_k8s_svc.result.status.loadBalancer.ingress[0].ip is defined) or (item.ssh_service.type == 'ClusterIP' and node_k8s_svc.result.spec.clusterIP is defined)"
      kubernetes.core.k8s_service:
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default(default_namespace) }}"
        type: "{{ item.ssh_service.type }}"
        selector:
          ansible-molecule: "{{ item.name }}"
          vm.cnv.io/name: "{{ item.name }}"
        ports:
          - port: 22
            protocol: TCP
    
    - name: Ensure API Cluster service is created
      kubernetes.core.k8s:
        state: present
        kind: Service   
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: ansible-rke2-api-svc
            namespace: devops
          spec:
            selector:
              app: molecule-testing
              primary: 'True'
            type: ClusterIP
            ports:
              - port: 6443
                protocol: TCP
                targetPort: 6443
                name: rke2-6443
              - port: 9345
                protocol: TCP
                targetPort: 9345
                name: rke2-9345
              - port: 8472
                protocol: UDP
                targetPort: 8472
                name: rke2-8472
              - port: 2379
                protocol: TCP
                targetPort: 2379
                name: rke2-2379
              - port: 2380
                protocol: TCP
                targetPort: 2380
                name: rke2-2380
              - port: 2381
                protocol: TCP
                targetPort: 2381
                name: rke2-2381
              - port: 10250
                protocol: TCP
                targetPort: 10250
                name: rke2-10250
              - port: 4240
                protocol: TCP
                targetPort: 4240
                name: rke2-4240
              - port: 179
                protocol: TCP
                targetPort: 179
                name: rke2-179
              - port: 4789
                targetPort: 4789
                protocol: UDP
                name: rke2-4789
              - port: 5473
                protocol: TCP
                targetPort: 5473
                name: rke2-5473
              - port: 9098
                protocol: TCP
                targetPort: 9098
                name: rke2-9098
              - port: 9099
                protocol: TCP
                targetPort: 9099
                name: rke2-9099
              - port: 51820
                protocol: UDP
                targetPort: 51820
                name: rke2-51820
              - port: 51821
                name: rke2-51821
                targetPort: 51821
                protocol: UDP
                
    - name: Ensure Info is correct
      ansible.builtin.debug:
        var: node_k8s_svc

    - name: Set ssh setting for Cluster IP
      vars:
        type: "{{ item.ssh_service.type }}"
        ssh_ip: "{{ node_k8s_svc.result.spec.clusterIP }}"
      when: type == 'ClusterIP'
      ansible.builtin.set_fact:
        instance_conf_dict:
          # if not running, ssh access will not be tested
          ssh_test: "{{ item.run_strategy | default(default_run_strategy) != 'Halted' and item.running | default(true) }}"
          instance: "{{ item.name }}"
          address: "{{ ssh_ip }}"
          user: "{{ item.molecule_user | default(default_user_molecule) }}"
          port: "22"
          identity_file: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"

    - name: Set ssh setting for LoadBalancer Cluster IP
      vars:
        type: "{{ item.ssh_service.type }}"
        ssh_ip: "{{ node_k8s_svc.result.status.loadBalancer.ingress[0].ip }}"
      when: type == 'LoadBalancer'
      ansible.builtin.set_fact:
        instance_conf_dict:
          # if not running, ssh access will not be tested
          ssh_test: "{{ item.run_strategy | default(default_run_strategy) != 'Halted' and item.running | default(true) }}"
          instance: "{{ item.name }}"
          address: "{{ ssh_ip }}"
          user: "{{ item.user_molecule | default(default_user_molecule) }}"
          port: "22"
          identity_file: "{{ molecule_ephemeral_directory }}/identity_{{ item.name }}"

    - name: Create hosts file
      become: true
      when: item.ssh_service.type == 'LoadBalancer'
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '.* {{ instance_conf_dict.instance }}'
        line: '{{ instance_conf_dict.address }} {{ instance_conf_dict.instance }}'
        state: present

    - name: Ssh access test
      ansible.builtin.wait_for:
        timeout: "{{ item.ssh_timeout | default(default_ssh_timeout) }}"
        port: "{{ instance_conf_dict.port }}"
        host: "{{ instance_conf_dict.address }}"
        delay: "{{ item.ssh_delay | default(default_ssh_delay) }}"

    - name: Convert instance config dict to a list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_conf | default([]) + [instance_conf_dict] }}"
    - name: Debug
      ansible.builtin.debug:
        var: instance_conf
